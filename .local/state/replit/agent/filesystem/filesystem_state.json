{"file_contents":{"design_guidelines.md":{"content":"# Design Guidelines for Tax Accounting Blog Management System\n\n## Design Approach: Reference-Based (Medium + WordPress Inspired)\nDrawing inspiration from Medium's clean reading experience and WordPress's comprehensive admin interface, optimized for professional tax accounting content.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Primary: 44 64% 38% (Professional Blue #2C5AA0)\n- Secondary: 210 29% 29% (Slate Gray #34495E)\n- Background: 0 0% 100% (White #FFFFFF)\n- Text: 210 29% 24% (Dark Gray #2C3E50)\n\n**Accent Colors:**\n- Accent: 204 70% 53% (Bright Blue #3498DB)\n- Success: 145 63% 42% (Green #27AE60)\n\n**Dark Mode:**\n- Background: 210 29% 12%\n- Surface: 210 29% 16%\n- Text: 0 0% 95%\n\n### B. Typography\n**Font Stack:** Noto Sans / Source Sans Pro via Google Fonts\n- Headings: 600-700 weight, clear hierarchy (2xl, xl, lg)\n- Body: 400 weight, 16px base, 1.6 line-height\n- UI Elements: 500 weight for buttons and labels\n\n### C. Layout System\n**Spacing Units:** Tailwind 2, 4, 8, 12, 16\n- Consistent p-4, m-8 patterns\n- Component spacing: gap-4, gap-8\n- Section padding: py-12, px-4\n\n### D. Component Library\n\n**Public Blog Site:**\n- Clean article cards with typography focus\n- Minimal navigation bar with search\n- Article content with generous whitespace\n- Category/tag filtering sidebar\n- SEO-optimized meta displays\n\n**Admin Dashboard:**\n- WordPress-inspired sidebar navigation\n- Rich text editor with toolbar\n- Content scheduling interface\n- AI generation panel with prompts\n- Analytics cards and charts\n- Media library with drag-drop upload\n\n**Shared Components:**\n- Professional button styles (filled primary, outline secondary)\n- Form inputs with focus states\n- Modal dialogs for confirmations\n- Toast notifications for actions\n- Loading states with skeleton screens\n\n### E. Visual Hierarchy\n- Bold typography for content emphasis\n- Subtle shadows for card elevation\n- Clear content sections with borders\n- Professional iconography (Heroicons)\n- Consistent button sizing and spacing\n\n### F. Content-First Design\n- Reading-optimized article layouts\n- Clear content categorization\n- Intuitive admin workflow\n- Mobile-responsive grid system\n- Fast-loading optimized images\n\n## Images\nNo large hero images required. Focus on:\n- Article thumbnail images (16:9 aspect ratio)\n- Author avatars (circular, small)\n- Category icons (minimal, professional)\n- Dashboard charts and data visualizations\n\nThe design prioritizes content readability and professional aesthetics suitable for tax accounting expertise, balancing clean public presentation with powerful admin functionality.","size_bytes":2603},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Tax Accounting Blog Management System\n\n## Overview\n\nThis is a comprehensive blog management system specifically designed for tax accounting firms. The application features a modern React frontend with TypeScript, an Express.js backend, and PostgreSQL database integration. It combines a public-facing blog site with a sophisticated admin dashboard that includes AI-powered content generation capabilities.\n\nThe system is built to handle professional tax accounting content with features like category filtering, content scheduling, SEO optimization, and automated content generation. The design follows Medium-inspired clean reading experiences combined with WordPress-style admin functionality, optimized for professional tax content.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Styling**: Tailwind CSS with custom design system based on shadcn/ui components\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management\n- **Theme System**: Custom light/dark mode implementation with CSS variables\n\n### Component Structure\n- **Public Blog Interface**: Clean, Medium-inspired design with article cards, category filtering, and search functionality\n- **Admin Dashboard**: WordPress-inspired interface with sidebar navigation, content management, and AI integration panels\n- **Shared UI Components**: Comprehensive design system using Radix UI primitives with custom styling\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Storage Interface**: Abstracted storage layer (currently in-memory, designed for PostgreSQL integration)\n- **API Design**: RESTful API structure with middleware for logging and error handling\n\n### Database Design\n- **Primary Database**: PostgreSQL (configured via Drizzle)\n- **Schema Management**: Type-safe schema definitions with Zod validation\n- **Migration System**: Drizzle Kit for database migrations and schema changes\n\n### Development Architecture\n- **Build System**: Vite for fast development and optimized production builds\n- **Development Server**: Hot module replacement with Vite middleware integration\n- **TypeScript Configuration**: Strict typing with path aliases for clean imports\n- **Code Organization**: Monorepo structure with shared types and utilities\n\n### Design System\n- **Color Palette**: Professional blue primary (#2C5AA0) with carefully chosen accent colors\n- **Typography**: Noto Sans/Source Sans Pro for professional readability\n- **Component Variants**: Systematic approach to button states, card elevations, and interactive elements\n- **Responsive Design**: Mobile-first approach with Tailwind breakpoints\n\n### Content Management Features\n- **Rich Text Editing**: Planned integration for content creation\n- **AI Content Generation**: Interface for automated content creation with customizable prompts\n- **Category System**: Hierarchical content organization with tags and filtering\n- **SEO Optimization**: Built-in meta tag management and content optimization\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React Router (Wouter), TanStack React Query for data fetching\n- **UI Component Library**: Radix UI primitives for accessible, unstyled components\n- **Styling**: Tailwind CSS with PostCSS for utility-first styling approach\n\n### Database and Backend\n- **Database**: Neon Database (PostgreSQL) via @neondatabase/serverless\n- **ORM**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **Session Management**: connect-pg-simple for PostgreSQL-backed session storage\n\n### Development and Build Tools\n- **Build Tool**: Vite for development server and production builds\n- **TypeScript**: Full TypeScript support across frontend and backend\n- **Code Quality**: ESBuild for fast compilation and bundling\n\n### Utility Libraries\n- **Date Handling**: date-fns for comprehensive date manipulation\n- **Class Management**: clsx and tailwind-merge for conditional CSS classes\n- **Form Handling**: React Hook Form with Zod resolvers for validation\n- **Carousel**: Embla Carousel for content sliders and galleries\n\n### Planned Integrations\n- **AI Content Generation**: Interface ready for OpenAI or similar AI service integration\n- **Search Functionality**: Architecture prepared for search service integration\n- **Analytics**: Dashboard structure ready for analytics service integration\n- **Email Services**: Contact forms and notifications system ready for email service integration","size_bytes":4704},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Noto Sans\", \"Source Sans Pro\", \"sans-serif\"],\n        serif: [\"Georgia\", \"serif\"],\n        mono: [\"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4077},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { \n  users, \n  posts, \n  scheduledPosts, \n  seoGuidelines, \n  aiContentTemplates, \n  bulkContentJobs,\n  type User, \n  type InsertUser,\n  type Post,\n  type InsertPost,\n  type ScheduledPost,\n  type InsertScheduledPost,\n  type SeoGuideline,\n  type InsertSeoGuideline,\n  type AiContentTemplate,\n  type InsertAiContentTemplate,\n  type BulkContentJob,\n  type InsertBulkContentJob\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\n// Storage interface - all CRUD methods for the blog system\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  validateUserPassword(username: string, password: string): Promise<User | null>;\n\n  // Post operations\n  getAllPosts(): Promise<Post[]>;\n  getPublishedPosts(): Promise<Post[]>;\n  getPostById(id: string): Promise<Post | undefined>;\n  getPostBySlug(slug: string): Promise<Post | undefined>;\n  getPostsByCategory(category: string): Promise<Post[]>;\n  createPost(post: InsertPost): Promise<Post>;\n  updatePost(id: string, post: Partial<InsertPost>): Promise<Post | undefined>;\n  deletePost(id: string): Promise<void>;\n  incrementPostViews(id: string): Promise<void>;\n\n  // Scheduled post operations\n  getAllScheduledPosts(): Promise<ScheduledPost[]>;\n  getScheduledPostById(id: string): Promise<ScheduledPost | undefined>;\n  getScheduledPostsDue(): Promise<ScheduledPost[]>;\n  createScheduledPost(post: InsertScheduledPost): Promise<ScheduledPost>;\n  updateScheduledPost(id: string, post: Partial<InsertScheduledPost>): Promise<ScheduledPost | undefined>;\n  deleteScheduledPost(id: string): Promise<void>;\n  publishScheduledPost(id: string): Promise<Post>;\n\n  // SEO Guidelines operations\n  getAllSeoGuidelines(): Promise<SeoGuideline[]>;\n  getActiveSeoGuideline(): Promise<SeoGuideline | undefined>;\n  getSeoGuidelineById(id: string): Promise<SeoGuideline | undefined>;\n  createSeoGuideline(guideline: InsertSeoGuideline): Promise<SeoGuideline>;\n  updateSeoGuideline(id: string, guideline: Partial<InsertSeoGuideline>): Promise<SeoGuideline | undefined>;\n  setActiveSeoGuideline(id: string): Promise<void>;\n\n  // AI Content Template operations\n  getAllAiContentTemplates(): Promise<AiContentTemplate[]>;\n  getActiveAiContentTemplates(): Promise<AiContentTemplate[]>;\n  getAiContentTemplateById(id: string): Promise<AiContentTemplate | undefined>;\n  createAiContentTemplate(template: InsertAiContentTemplate): Promise<AiContentTemplate>;\n  updateAiContentTemplate(id: string, template: Partial<InsertAiContentTemplate>): Promise<AiContentTemplate | undefined>;\n\n  // Bulk Content Job operations\n  getAllBulkContentJobs(): Promise<BulkContentJob[]>;\n  getBulkContentJobById(id: string): Promise<BulkContentJob | undefined>;\n  createBulkContentJob(job: InsertBulkContentJob): Promise<BulkContentJob>;\n  updateBulkContentJob(id: string, job: Partial<InsertBulkContentJob>): Promise<BulkContentJob | undefined>;\n  deleteBulkContentJob(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // Hash the password before storing\n    const saltRounds = 12;\n    const hashedPassword = await bcrypt.hash(insertUser.password, saltRounds);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        ...insertUser,\n        password: hashedPassword,\n      })\n      .returning();\n    return user;\n  }\n\n  async validateUserPassword(username: string, password: string): Promise<User | null> {\n    const user = await this.getUserByUsername(username);\n    if (!user) {\n      return null;\n    }\n    \n    const isValidPassword = await bcrypt.compare(password, user.password);\n    if (!isValidPassword) {\n      return null;\n    }\n    \n    return user;\n  }\n\n  // Post operations\n  async getAllPosts(): Promise<Post[]> {\n    return await db.select().from(posts).orderBy(desc(posts.created_at));\n  }\n\n  async getPublishedPosts(): Promise<Post[]> {\n    return await db\n      .select()\n      .from(posts)\n      .where(eq(posts.published, true))\n      .orderBy(desc(posts.published_at));\n  }\n\n  async getPostById(id: string): Promise<Post | undefined> {\n    const [post] = await db.select().from(posts).where(eq(posts.id, id));\n    return post || undefined;\n  }\n\n  async getPostBySlug(slug: string): Promise<Post | undefined> {\n    const [post] = await db.select().from(posts).where(eq(posts.slug, slug));\n    return post || undefined;\n  }\n\n  async getPostsByCategory(category: string): Promise<Post[]> {\n    return await db\n      .select()\n      .from(posts)\n      .where(and(eq(posts.category, category), eq(posts.published, true)))\n      .orderBy(desc(posts.published_at));\n  }\n\n  async createPost(insertPost: InsertPost): Promise<Post> {\n    const [post] = await db\n      .insert(posts)\n      .values(insertPost)\n      .returning();\n    return post;\n  }\n\n  async updatePost(id: string, updatePost: Partial<InsertPost>): Promise<Post | undefined> {\n    const [post] = await db\n      .update(posts)\n      .set({ ...updatePost, updated_at: new Date() })\n      .where(eq(posts.id, id))\n      .returning();\n    return post || undefined;\n  }\n\n  async deletePost(id: string): Promise<void> {\n    await db.delete(posts).where(eq(posts.id, id));\n  }\n\n  async incrementPostViews(id: string): Promise<void> {\n    await db\n      .update(posts)\n      .set({ views: sql`${posts.views} + 1` })\n      .where(eq(posts.id, id));\n  }\n\n  // Scheduled post operations\n  async getAllScheduledPosts(): Promise<ScheduledPost[]> {\n    return await db.select().from(scheduledPosts).orderBy(desc(scheduledPosts.created_at));\n  }\n\n  async getScheduledPostById(id: string): Promise<ScheduledPost | undefined> {\n    const [scheduledPost] = await db.select().from(scheduledPosts).where(eq(scheduledPosts.id, id));\n    return scheduledPost || undefined;\n  }\n\n  async getScheduledPostsDue(): Promise<ScheduledPost[]> {\n    return await db\n      .select()\n      .from(scheduledPosts)\n      .where(sql`${scheduledPosts.scheduled_for} <= NOW()`);\n  }\n\n  async createScheduledPost(insertScheduledPost: InsertScheduledPost): Promise<ScheduledPost> {\n    const [scheduledPost] = await db\n      .insert(scheduledPosts)\n      .values(insertScheduledPost)\n      .returning();\n    return scheduledPost;\n  }\n\n  async updateScheduledPost(id: string, updateScheduledPost: Partial<InsertScheduledPost>): Promise<ScheduledPost | undefined> {\n    const [scheduledPost] = await db\n      .update(scheduledPosts)\n      .set(updateScheduledPost)\n      .where(eq(scheduledPosts.id, id))\n      .returning();\n    return scheduledPost || undefined;\n  }\n\n  async deleteScheduledPost(id: string): Promise<void> {\n    await db.delete(scheduledPosts).where(eq(scheduledPosts.id, id));\n  }\n\n  async publishScheduledPost(id: string): Promise<Post> {\n    // Use transaction to ensure atomicity and prevent duplicate publishes\n    return await db.transaction(async (tx) => {\n      // Delete the scheduled post and return it in one atomic operation\n      // This ensures only one concurrent transaction can successfully grab the record\n      const deletedScheduledPosts = await tx\n        .delete(scheduledPosts)\n        .where(eq(scheduledPosts.id, id))\n        .returning();\n        \n      if (deletedScheduledPosts.length === 0) {\n        throw new Error(\"예약된 게시물을 찾을 수 없거나 이미 발행되었습니다\");\n      }\n      \n      const scheduledPost = deletedScheduledPosts[0];\n\n      // Create the published post from the deleted scheduled post\n      const [post] = await tx\n        .insert(posts)\n        .values({\n          title: scheduledPost.title,\n          content: scheduledPost.content,\n          excerpt: scheduledPost.excerpt,\n          slug: scheduledPost.slug,\n          category: scheduledPost.category,\n          tags: scheduledPost.tags,\n          main_keyword: scheduledPost.main_keyword,\n          seo_title: scheduledPost.seo_title,\n          seo_description: scheduledPost.seo_description,\n          author_id: scheduledPost.author_id,\n          published: true,\n          ai_generated: scheduledPost.ai_generated,\n          published_at: new Date(),\n        })\n        .returning();\n\n      return post;\n    });\n  }\n\n  // SEO Guidelines operations\n  async getAllSeoGuidelines(): Promise<SeoGuideline[]> {\n    return await db.select().from(seoGuidelines).orderBy(desc(seoGuidelines.created_at));\n  }\n\n  async getActiveSeoGuideline(): Promise<SeoGuideline | undefined> {\n    const [guideline] = await db\n      .select()\n      .from(seoGuidelines)\n      .where(eq(seoGuidelines.active, true))\n      .orderBy(desc(seoGuidelines.updated_at));\n    return guideline || undefined;\n  }\n\n  async getSeoGuidelineById(id: string): Promise<SeoGuideline | undefined> {\n    const [guideline] = await db.select().from(seoGuidelines).where(eq(seoGuidelines.id, id));\n    return guideline || undefined;\n  }\n\n  async createSeoGuideline(insertGuideline: InsertSeoGuideline): Promise<SeoGuideline> {\n    const [guideline] = await db\n      .insert(seoGuidelines)\n      .values(insertGuideline)\n      .returning();\n    return guideline;\n  }\n\n  async updateSeoGuideline(id: string, updateGuideline: Partial<InsertSeoGuideline>): Promise<SeoGuideline | undefined> {\n    const [guideline] = await db\n      .update(seoGuidelines)\n      .set({ ...updateGuideline, updated_at: new Date() })\n      .where(eq(seoGuidelines.id, id))\n      .returning();\n    return guideline || undefined;\n  }\n\n  async setActiveSeoGuideline(id: string): Promise<void> {\n    // Use transaction to ensure atomicity\n    await db.transaction(async (tx) => {\n      // First, verify the target guideline exists\n      const [targetGuideline] = await tx\n        .select()\n        .from(seoGuidelines)\n        .where(eq(seoGuidelines.id, id));\n        \n      if (!targetGuideline) {\n        throw new Error(\"지정된 SEO 가이드라인을 찾을 수 없습니다\");\n      }\n\n      // Deactivate all guidelines\n      await tx\n        .update(seoGuidelines)\n        .set({ active: false, updated_at: new Date() });\n\n      // Then activate the specified one\n      await tx\n        .update(seoGuidelines)\n        .set({ active: true, updated_at: new Date() })\n        .where(eq(seoGuidelines.id, id));\n    });\n  }\n\n  // AI Content Template operations\n  async getAllAiContentTemplates(): Promise<AiContentTemplate[]> {\n    return await db.select().from(aiContentTemplates).orderBy(desc(aiContentTemplates.created_at));\n  }\n\n  async getActiveAiContentTemplates(): Promise<AiContentTemplate[]> {\n    return await db\n      .select()\n      .from(aiContentTemplates)\n      .where(eq(aiContentTemplates.active, true))\n      .orderBy(desc(aiContentTemplates.created_at));\n  }\n\n  async getAiContentTemplateById(id: string): Promise<AiContentTemplate | undefined> {\n    const [template] = await db.select().from(aiContentTemplates).where(eq(aiContentTemplates.id, id));\n    return template || undefined;\n  }\n\n  async createAiContentTemplate(insertTemplate: InsertAiContentTemplate): Promise<AiContentTemplate> {\n    const [template] = await db\n      .insert(aiContentTemplates)\n      .values(insertTemplate)\n      .returning();\n    return template;\n  }\n\n  async updateAiContentTemplate(id: string, updateTemplate: Partial<InsertAiContentTemplate>): Promise<AiContentTemplate | undefined> {\n    const [template] = await db\n      .update(aiContentTemplates)\n      .set(updateTemplate)\n      .where(eq(aiContentTemplates.id, id))\n      .returning();\n    return template || undefined;\n  }\n\n  // Bulk Content Job operations\n  async getAllBulkContentJobs(): Promise<BulkContentJob[]> {\n    return await db.select().from(bulkContentJobs).orderBy(desc(bulkContentJobs.created_at));\n  }\n\n  async getBulkContentJobById(id: string): Promise<BulkContentJob | undefined> {\n    const [job] = await db.select().from(bulkContentJobs).where(eq(bulkContentJobs.id, id));\n    return job || undefined;\n  }\n\n  async createBulkContentJob(insertJob: InsertBulkContentJob): Promise<BulkContentJob> {\n    const [job] = await db\n      .insert(bulkContentJobs)\n      .values(insertJob)\n      .returning();\n    return job;\n  }\n\n  async updateBulkContentJob(id: string, updateJob: Partial<InsertBulkContentJob>): Promise<BulkContentJob | undefined> {\n    const [job] = await db\n      .update(bulkContentJobs)\n      .set(updateJob)\n      .where(eq(bulkContentJobs.id, id))\n      .returning();\n    return job || undefined;\n  }\n\n  async deleteBulkContentJob(id: string): Promise<void> {\n    await db.delete(bulkContentJobs).where(eq(bulkContentJobs.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":13138},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - 관리자 사용자\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Posts table - 공개된 블로그 게시물\nexport const posts = pgTable(\"posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"), // 요약\n  slug: text(\"slug\").notNull().unique(), // URL 경로\n  category: text(\"category\").notNull().default(\"general\"),\n  tags: text(\"tags\").array().default([]), // 태그 배열\n  main_keyword: text(\"main_keyword\"), // 메인 키워드\n  seo_title: text(\"seo_title\"),\n  seo_description: text(\"seo_description\"),\n  author_id: varchar(\"author_id\").references(() => users.id),\n  published: boolean(\"published\").default(false),\n  featured: boolean(\"featured\").default(false),\n  ai_generated: boolean(\"ai_generated\").default(false),\n  views: integer(\"views\").default(0),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n  published_at: timestamp(\"published_at\"),\n});\n\n// Scheduled posts table - 예약 발행 대기 중인 게시물\nexport const scheduledPosts = pgTable(\"scheduled_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  slug: text(\"slug\").notNull(),\n  category: text(\"category\").notNull().default(\"general\"),\n  tags: text(\"tags\").array().default([]),\n  main_keyword: text(\"main_keyword\"),\n  seo_title: text(\"seo_title\"),\n  seo_description: text(\"seo_description\"),\n  author_id: varchar(\"author_id\").references(() => users.id),\n  scheduled_for: timestamp(\"scheduled_for\").notNull(), // 예약 발행 시간\n  ai_generated: boolean(\"ai_generated\").default(false),\n  ai_prompt: text(\"ai_prompt\"), // AI 생성 시 사용된 프롬프트\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// SEO Guidelines table - SEO 가이드라인 저장\nexport const seoGuidelines = pgTable(\"seo_guidelines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // 가이드라인 이름\n  description: text(\"description\"), // 설명\n  guidelines: text(\"guidelines\").notNull(), // 가이드라인 전문\n  version: text(\"version\").default(\"1.0\"),\n  active: boolean(\"active\").default(true),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  updated_at: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// AI Content Templates - AI 콘텐츠 생성 템플릿\nexport const aiContentTemplates = pgTable(\"ai_content_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // 템플릿 이름\n  content_type: text(\"content_type\").notNull(), // 콘텐츠 유형 (accounting-tips, tax-news, etc.)\n  target_audience: text(\"target_audience\").notNull(), // 대상 독자 (individual, corporation, etc.)\n  prompt_template: text(\"prompt_template\").notNull(), // AI 프롬프트 템플릿\n  example_keywords: text(\"example_keywords\").array().default([]), // 예시 키워드들\n  active: boolean(\"active\").default(true),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Bulk Content Generation - 대량 콘텐츠 생성 작업\nexport const bulkContentJobs = pgTable(\"bulk_content_jobs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(), // 작업 이름\n  template_id: varchar(\"template_id\").references(() => aiContentTemplates.id),\n  guideline_id: varchar(\"guideline_id\").references(() => seoGuidelines.id),\n  topics: jsonb(\"topics\").notNull(), // JSON 형태의 주제 목록\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processing, completed, failed\n  progress: integer(\"progress\").default(0), // 진행률 (0-100)\n  total_items: integer(\"total_items\").notNull(),\n  completed_items: integer(\"completed_items\").default(0),\n  failed_items: integer(\"failed_items\").default(0),\n  results: jsonb(\"results\").default({}), // 결과 데이터\n  error_log: text(\"error_log\"),\n  created_at: timestamp(\"created_at\").defaultNow().notNull(),\n  completed_at: timestamp(\"completed_at\"),\n});\n\n// Relations\nexport const userRelations = relations(users, ({ many }) => ({\n  posts: many(posts),\n  scheduledPosts: many(scheduledPosts),\n}));\n\nexport const postRelations = relations(posts, ({ one }) => ({\n  author: one(users, {\n    fields: [posts.author_id],\n    references: [users.id],\n  }),\n}));\n\nexport const scheduledPostRelations = relations(scheduledPosts, ({ one }) => ({\n  author: one(users, {\n    fields: [scheduledPosts.author_id],\n    references: [users.id],\n  }),\n}));\n\nexport const bulkContentJobRelations = relations(bulkContentJobs, ({ one }) => ({\n  template: one(aiContentTemplates, {\n    fields: [bulkContentJobs.template_id],\n    references: [aiContentTemplates.id],\n  }),\n  guideline: one(seoGuidelines, {\n    fields: [bulkContentJobs.guideline_id],\n    references: [seoGuidelines.id],\n  }),\n}));\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertPostSchema = createInsertSchema(posts).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n  views: true,\n});\n\nexport const insertScheduledPostSchema = createInsertSchema(scheduledPosts).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertSeoGuidelineSchema = createInsertSchema(seoGuidelines).omit({\n  id: true,\n  created_at: true,\n  updated_at: true,\n});\n\nexport const insertAiContentTemplateSchema = createInsertSchema(aiContentTemplates).omit({\n  id: true,\n  created_at: true,\n});\n\nexport const insertBulkContentJobSchema = createInsertSchema(bulkContentJobs).omit({\n  id: true,\n  created_at: true,\n  completed_at: true,\n  progress: true,\n  completed_items: true,\n  failed_items: true,\n  results: true,\n});\n\n// Type definitions\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Post = typeof posts.$inferSelect;\nexport type InsertPost = z.infer<typeof insertPostSchema>;\n\nexport type ScheduledPost = typeof scheduledPosts.$inferSelect;\nexport type InsertScheduledPost = z.infer<typeof insertScheduledPostSchema>;\n\nexport type SeoGuideline = typeof seoGuidelines.$inferSelect;\nexport type InsertSeoGuideline = z.infer<typeof insertSeoGuidelineSchema>;\n\nexport type AiContentTemplate = typeof aiContentTemplates.$inferSelect;\nexport type InsertAiContentTemplate = z.infer<typeof insertAiContentTemplateSchema>;\n\nexport type BulkContentJob = typeof bulkContentJobs.$inferSelect;\nexport type InsertBulkContentJob = z.infer<typeof insertBulkContentJobSchema>;","size_bytes":7215},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport Home from \"@/pages/Home\";\nimport PostView from \"@/pages/PostView\";\nimport AdminPage from \"@/pages/AdminPage\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState } from \"react\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  tags: string[];\n  readTime: number;\n  views: number;\n  featured?: boolean;\n}\n\nfunction Router() {\n  const [currentPost, setCurrentPost] = useState<BlogPost | null>(null);\n\n  // todo: remove mock functionality\n  const sampleDetailedPost: BlogPost = {\n    id: '1',\n    title: '2024년 세무 변경사항 완벽 가이드: 중소기업을 위한 필수 체크리스트',\n    excerpt: '2024년 새로 시행되는 세무 규정들을 정리하고, 중소기업이 놓치기 쉬운 주요 변경사항들을 상세히 설명합니다.',\n    content: `# 2024년 세무 변경사항 개요\n\n2024년에는 중소기업을 위한 다양한 세무 혜택과 규정 변경이 있었습니다. 이 가이드에서는 주요 변경사항들을 체계적으로 정리하여 실무에 바로 적용할 수 있도록 도와드리겠습니다.\n\n## 주요 변경사항\n\n### 1. 법인세 관련 변경사항\n\n#### 중소기업 특별세액감면 확대\n- 적용 대상: 중소기업 (매출액 400억원 미만)\n- 감면율: 10% → 15%로 확대\n- 적용기간: 2024.1.1 ~ 2026.12.31\n\n#### 연구개발비 세액공제 강화\n연구개발비에 대한 세액공제율이 다음과 같이 조정되었습니다:\n\n- 일반 중소기업: 25% → 30%\n- 벤처기업: 30% → 35%\n- 첨단기술 분야: 추가 5% 가산\n\n### 2. 부가가치세 변경사항\n\n#### 간이과세 기준금액 상향조정\n- 기존: 4,800만원\n- 변경: 8,000만원\n- 적용시기: 2024년 1월 1일부터\n\n이로 인해 더 많은 소상공인들이 간이과세 혜택을 받을 수 있게 되었습니다.\n\n### 3. 원천징수 관련 변경사항\n\n#### 근로소득 간이세액표 개정\n월급여 구간별 원천징수세액이 조정되어 근로자의 세부담이 경감되었습니다.\n\n## 중소기업 체크리스트\n\n### 즉시 확인해야 할 사항\n1. [ ] 우리 회사 매출액이 간이과세 기준에 해당하는지 확인\n2. [ ] R&D 투자 계획이 있다면 세액공제 혜택 검토\n3. [ ] 기존 세무 신고 프로세스 점검 및 업데이트\n\n### 3월까지 준비해야 할 사항\n1. [ ] 2023년 법인세 신고 시 새로운 공제항목 적용\n2. [ ] 회계시스템 업데이트 (새로운 세율 반영)\n3. [ ] 세무대리인과 변경사항 논의\n\n## 실무 적용 가이드\n\n### 세액공제 신청 방법\n1. 국세청 홈택스 접속\n2. 법인 → 신고/납부 → 법인세 신고\n3. 해당 공제항목에 필요 서류 첨부\n4. 온라인 제출 또는 세무서 방문 제출\n\n### 필요 서류\n- 연구개발비 계산서\n- 관련 계약서 사본\n- 지출증빙 서류\n\n## 주의사항\n\n⚠️ **중요**: 모든 변경사항은 2024년 1월 1일부터 적용되므로, 기존 계약이나 시스템을 점검하여 필요한 조치를 취하시기 바랍니다.\n\n⚠️ **세무 신고 시**: 새로운 양식과 기준을 적용해야 하므로 세무 전문가와 상담을 권장합니다.\n\n## 마무리\n\n2024년 세무 변경사항들은 전반적으로 중소기업에게 유리한 방향으로 개정되었습니다. 하지만 복잡한 세법의 특성상 전문가의 도움을 받아 정확한 적용을 하시기 바랍니다.\n\n추가 문의사항이 있으시면 언제든지 연락주시기 바랍니다.`,\n    author: '김세무',\n    publishedAt: '2024.03.15',\n    readTime: 8,\n    views: 1247,\n    tags: ['세무법규', '중소기업', '법인세', '2024년 변경사항', '세액공제']\n  };\n\n  const handlePostClick = (post: BlogPost) => {\n    setCurrentPost(post);\n    console.log('게시물로 이동:', post.title);\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/\" component={() => <Home onPostClick={handlePostClick} />} />\n      <Route path=\"/admin\" component={AdminPage} />\n      <Route path=\"/post/:id\">\n        {currentPost ? (\n          <PostView post={currentPost} onBack={() => window.history.back()} />\n        ) : (\n          <PostView post={sampleDetailedPost} onBack={() => window.history.back()} />\n        )}\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"light\" storageKey=\"tax-blog-theme\">\n        <TooltipProvider>\n          <div className=\"min-h-screen bg-background font-sans antialiased\">\n            <Router />\n            <Toaster />\n            \n            {/* Demo Navigation - todo: remove mock functionality */}\n            <div className=\"fixed bottom-4 right-4 flex gap-2 z-50\">\n              <button\n                onClick={() => window.location.href = '/'}\n                className=\"bg-primary text-primary-foreground px-3 py-2 rounded-md text-sm font-medium hover-elevate\"\n                data-testid=\"button-demo-home\"\n              >\n                공개 블로그\n              </button>\n              <button\n                onClick={() => window.location.href = '/admin'}\n                className=\"bg-secondary text-secondary-foreground px-3 py-2 rounded-md text-sm font-medium hover-elevate\"\n                data-testid=\"button-demo-admin\"\n              >\n                관리자 패널\n              </button>\n            </div>\n          </div>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}","size_bytes":5910},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 210 29% 24%;\n\n  --border: 210 11% 91%;\n\n  --card: 210 11% 97%;\n\n  --card-foreground: 210 29% 24%;\n\n  --card-border: 210 11% 93%;\n\n  --sidebar: 210 11% 94%;\n\n  --sidebar-foreground: 210 29% 24%;\n\n  --sidebar-border: 210 11% 90%;\n\n  --sidebar-primary: 44 64% 38%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 20% 87%;\n\n  --sidebar-accent-foreground: 210 29% 24%;\n\n  --sidebar-ring: 44 64% 38%;\n\n  --popover: 210 11% 95%;\n\n  --popover-foreground: 210 29% 24%;\n\n  --popover-border: 210 11% 89%;\n\n  --primary: 44 64% 38%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 210 20% 87%;\n\n  --secondary-foreground: 210 29% 24%;\n\n  --muted: 210 11% 96%;\n\n  --muted-foreground: 210 20% 58%;\n\n  --accent: 204 70% 93%;\n\n  --accent-foreground: 204 70% 24%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 20% 82%;\n  --ring: 44 64% 38%;\n  --chart-1: 44 64% 38%;\n  --chart-2: 204 70% 53%;\n  --chart-3: 145 63% 42%;\n  --chart-4: 262 52% 47%;\n  --chart-5: 25 95% 53%;\n\n  --font-sans: Noto Sans, Source Sans Pro, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 20% 20% / 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 1px 2px -1px hsl(210 20% 20% / 0.10);\n  --shadow: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 1px 2px -1px hsl(210 20% 20% / 0.10);\n  --shadow-md: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 2px 4px -1px hsl(210 20% 20% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 4px 6px -1px hsl(210 20% 20% / 0.15);\n  --shadow-xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.05), 0px 8px 10px -1px hsl(210 20% 20% / 0.15);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210 20% 20% / 0.10);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 210 29% 12%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 210 20% 18%;\n\n  --card: 210 29% 14%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 210 20% 20%;\n\n  --sidebar: 210 29% 11%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 210 20% 16%;\n\n  --sidebar-primary: 44 64% 38%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 210 20% 18%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 44 64% 38%;\n\n  --popover: 210 29% 16%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 210 20% 22%;\n\n  --primary: 44 64% 38%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 210 20% 20%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 210 20% 14%;\n\n  --muted-foreground: 210 20% 65%;\n\n  --accent: 204 70% 20%;\n\n  --accent-foreground: 204 70% 85%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 210 20% 25%;\n  --ring: 44 64% 38%;\n  --chart-1: 204 70% 65%;\n  --chart-2: 44 64% 65%;\n  --chart-3: 145 63% 60%;\n  --chart-4: 262 52% 65%;\n  --chart-5: 25 95% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 1px 2px -1px hsl(0 0% 0% / 0.30);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 2px 4px -1px hsl(0 0% 0% / 0.30);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 4px 6px -1px hsl(0 0% 0% / 0.40);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.20), 0px 8px 10px -1px hsl(0 0% 0% / 0.40);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.30);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9794},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIContentGenerator.tsx":{"content":"import { useState } from \"react\";\nimport { Bot, Wand2, FileText, Loader2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface AIContentGeneratorProps {\n  onContentGenerated?: (content: { title: string; content: string; tags: string[] }) => void;\n}\n\nexport default function AIContentGenerator({ onContentGenerated }: AIContentGeneratorProps) {\n  const [prompt, setPrompt] = useState(\"\");\n  const [contentType, setContentType] = useState(\"\");\n  const [targetAudience, setTargetAudience] = useState(\"\");\n  const [keywords, setKeywords] = useState(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generatedContent, setGeneratedContent] = useState<any>(null);\n\n  const contentTypes = [\n    { value: \"tax-guide\", label: \"세무 가이드\" },\n    { value: \"accounting-tips\", label: \"회계 팁\" },\n    { value: \"law-updates\", label: \"법규 업데이트\" },\n    { value: \"case-study\", label: \"사례 연구\" },\n    { value: \"faq\", label: \"자주 묻는 질문\" },\n  ];\n\n  const audiences = [\n    { value: \"small-business\", label: \"중소기업\" },\n    { value: \"individual\", label: \"개인사업자\" },\n    { value: \"corporation\", label: \"법인\" },\n    { value: \"startup\", label: \"스타트업\" },\n    { value: \"general\", label: \"일반인\" },\n  ];\n\n  const handleGenerate = async () => {\n    if (!prompt.trim() || !contentType || !targetAudience) return;\n\n    setIsGenerating(true);\n    console.log(\"AI 콘텐츠 생성 시작:\", {\n      prompt,\n      contentType,\n      targetAudience,\n      keywords\n    });\n\n    // todo: remove mock functionality - simulate AI generation\n    setTimeout(() => {\n      const mockContent = {\n        title: `${contentTypes.find(t => t.value === contentType)?.label}: ${prompt.slice(0, 50)}...`,\n        content: `# ${prompt}\n\n이 글은 AI가 생성한 ${audiences.find(a => a.value === targetAudience)?.label}을 위한 ${contentTypes.find(t => t.value === contentType)?.label} 콘텐츠입니다.\n\n## 주요 내용\n\n${prompt}에 대한 상세한 설명과 실용적인 조언을 제공합니다.\n\n### 핵심 포인트\n- 실무에 바로 적용 가능한 정보\n- 최신 법규와 규정 반영\n- 단계별 실행 가이드\n\n### 결론\n${targetAudience === 'small-business' ? '중소기업' : audiences.find(a => a.value === targetAudience)?.label}의 성공적인 세무 관리를 위한 핵심 사항들을 정리했습니다.`,\n        tags: keywords.split(',').map(k => k.trim()).filter(Boolean).concat(['AI생성', contentTypes.find(t => t.value === contentType)?.label || ''])\n      };\n\n      setGeneratedContent(mockContent);\n      onContentGenerated?.(mockContent);\n      setIsGenerating(false);\n    }, 2000);\n  };\n\n  const handleUseContent = () => {\n    console.log(\"생성된 콘텐츠 사용:\", generatedContent);\n    // Reset form\n    setPrompt(\"\");\n    setContentType(\"\");\n    setTargetAudience(\"\");\n    setKeywords(\"\");\n    setGeneratedContent(null);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bot className=\"h-5 w-5 text-primary\" />\n            AI 콘텐츠 생성기\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"prompt\">주제 또는 요청사항</Label>\n            <Textarea\n              id=\"prompt\"\n              placeholder=\"예: 2024년 중소기업 세무 혜택에 대한 가이드를 작성해주세요\"\n              value={prompt}\n              onChange={(e) => setPrompt(e.target.value)}\n              rows={3}\n              data-testid=\"textarea-ai-prompt\"\n            />\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label>콘텐츠 유형</Label>\n              <Select value={contentType} onValueChange={setContentType}>\n                <SelectTrigger data-testid=\"select-content-type\">\n                  <SelectValue placeholder=\"유형 선택\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {contentTypes.map((type) => (\n                    <SelectItem key={type.value} value={type.value}>\n                      {type.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label>대상 독자</Label>\n              <Select value={targetAudience} onValueChange={setTargetAudience}>\n                <SelectTrigger data-testid=\"select-target-audience\">\n                  <SelectValue placeholder=\"독자 선택\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {audiences.map((audience) => (\n                    <SelectItem key={audience.value} value={audience.value}>\n                      {audience.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"keywords\">키워드 (쉼표로 구분)</Label>\n            <Input\n              id=\"keywords\"\n              placeholder=\"세무, 절세, 신고, 공제\"\n              value={keywords}\n              onChange={(e) => setKeywords(e.target.value)}\n              data-testid=\"input-keywords\"\n            />\n          </div>\n\n          <Button \n            onClick={handleGenerate}\n            disabled={!prompt.trim() || !contentType || !targetAudience || isGenerating}\n            className=\"w-full\"\n            data-testid=\"button-generate-content\"\n          >\n            {isGenerating ? (\n              <>\n                <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                AI가 콘텐츠를 생성하는 중...\n              </>\n            ) : (\n              <>\n                <Wand2 className=\"h-4 w-4 mr-2\" />\n                콘텐츠 생성하기\n              </>\n            )}\n          </Button>\n        </CardContent>\n      </Card>\n\n      {generatedContent && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5 text-green-600\" />\n              생성된 콘텐츠\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold text-lg mb-2\">{generatedContent.title}</h3>\n              <div className=\"flex flex-wrap gap-1 mb-4\">\n                {generatedContent.tags.map((tag: string, index: number) => (\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n\n            <div className=\"bg-muted/50 p-4 rounded-md max-h-64 overflow-y-auto\">\n              <pre className=\"whitespace-pre-wrap text-sm font-mono\">\n                {generatedContent.content}\n              </pre>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button onClick={handleUseContent} data-testid=\"button-use-content\">\n                콘텐츠 사용하기\n              </Button>\n              <Button variant=\"outline\" onClick={() => handleGenerate()} data-testid=\"button-regenerate\">\n                다시 생성하기\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7932},"client/src/components/AdminDashboard.tsx":{"content":"import { \n  BarChart3, \n  TrendingUp, \n  Users, \n  FileText, \n  Eye, \n  Calendar,\n  Bot,\n  PlusCircle\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface AdminDashboardProps {\n  onNavigate?: (section: string) => void;\n}\n\nexport default function AdminDashboard({ onNavigate }: AdminDashboardProps) {\n  // todo: remove mock functionality\n  const stats = {\n    totalPosts: 127,\n    totalViews: 45623,\n    totalUsers: 1834,\n    monthlyGrowth: 15.3\n  };\n\n  const recentPosts = [\n    {\n      id: '1',\n      title: '2024년 세무 변경사항 완벽 가이드',\n      status: 'published',\n      views: 1247,\n      publishedAt: '2024.03.15'\n    },\n    {\n      id: '2',\n      title: 'AI 시대의 세무 회계 동향',\n      status: 'draft',\n      views: 0,\n      publishedAt: null\n    },\n    {\n      id: '3',\n      title: '중소기업 절세 전략 10가지',\n      status: 'scheduled',\n      views: 0,\n      publishedAt: '2024.03.20'\n    }\n  ];\n\n  const upcomingSchedule = [\n    {\n      id: '1',\n      title: '법인세 신고 마감 안내',\n      scheduledAt: '2024.03.18 09:00',\n      type: 'ai-generated'\n    },\n    {\n      id: '2',\n      title: '부가가치세 변경사항 업데이트',\n      scheduledAt: '2024.03.22 14:00',\n      type: 'manual'\n    }\n  ];\n\n  const handleQuickAction = (action: string) => {\n    console.log('빠른 작업:', action);\n    onNavigate?.(action);\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'published':\n        return <Badge variant=\"default\">발행됨</Badge>;\n      case 'draft':\n        return <Badge variant=\"secondary\">초안</Badge>;\n      case 'scheduled':\n        return <Badge variant=\"outline\">예약됨</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">관리자 대시보드</h1>\n          <p className=\"text-muted-foreground\">블로그 현황과 주요 지표를 확인하세요</p>\n        </div>\n        <div className=\"flex gap-2\">\n          <Button onClick={() => handleQuickAction('new-post')} data-testid=\"button-new-post\">\n            <PlusCircle className=\"h-4 w-4 mr-2\" />\n            새 글 작성\n          </Button>\n          <Button variant=\"outline\" onClick={() => handleQuickAction('ai-content')} data-testid=\"button-ai-content\">\n            <Bot className=\"h-4 w-4 mr-2\" />\n            AI 생성\n          </Button>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 게시물</CardTitle>\n            <FileText className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalPosts}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              이번 달 +12개\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 조회수</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalViews.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              <TrendingUp className=\"inline h-3 w-3 mr-1\" />\n              +{stats.monthlyGrowth}% 증가\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">총 방문자</CardTitle>\n            <Users className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{stats.totalUsers.toLocaleString()}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              활성 사용자\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">월간 성장률</CardTitle>\n            <BarChart3 className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">+{stats.monthlyGrowth}%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              지난달 대비\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Posts */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <FileText className=\"h-5 w-5\" />\n              최근 게시물\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentPosts.map((post) => (\n                <div key={post.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-md\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm line-clamp-1\">{post.title}</h4>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      {getStatusBadge(post.status)}\n                      {post.publishedAt && (\n                        <span className=\"text-xs text-muted-foreground\">{post.publishedAt}</span>\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-medium\">{post.views.toLocaleString()}</div>\n                    <div className=\"text-xs text-muted-foreground\">조회</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button \n              variant=\"outline\" \n              className=\"w-full mt-4\"\n              onClick={() => handleQuickAction('posts')}\n              data-testid=\"button-view-all-posts\"\n            >\n              모든 게시물 보기\n            </Button>\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Schedule */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"h-5 w-5\" />\n              예정된 발행\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {upcomingSchedule.map((item) => (\n                <div key={item.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-md\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-sm line-clamp-1\">{item.title}</h4>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      <Badge variant={item.type === 'ai-generated' ? 'default' : 'secondary'} className=\"text-xs\">\n                        {item.type === 'ai-generated' ? 'AI 생성' : '수동 작성'}\n                      </Badge>\n                      <span className=\"text-xs text-muted-foreground\">{item.scheduledAt}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            <Button \n              variant=\"outline\" \n              className=\"w-full mt-4\"\n              onClick={() => handleQuickAction('schedule')}\n              data-testid=\"button-view-schedule\"\n            >\n              일정 관리하기\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8146},"client/src/components/AdminSidebar.tsx":{"content":"import { \n  LayoutDashboard, \n  FileText, \n  PlusCircle, \n  Calendar, \n  BarChart3, \n  Settings, \n  Bot,\n  Tags,\n  Users\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n} from \"@/components/ui/sidebar\";\n\ninterface AdminSidebarProps {\n  activeItem?: string;\n  onItemClick?: (item: string) => void;\n}\n\nexport default function AdminSidebar({ activeItem = 'dashboard', onItemClick }: AdminSidebarProps) {\n  const menuItems = [\n    {\n      title: \"대시보드\",\n      icon: LayoutDashboard,\n      id: \"dashboard\",\n    },\n    {\n      title: \"글 목록\",\n      icon: FileText,\n      id: \"posts\",\n    },\n    {\n      title: \"새 글 작성\",\n      icon: PlusCircle,\n      id: \"new-post\",\n    },\n    {\n      title: \"AI 콘텐츠 생성\",\n      icon: Bot,\n      id: \"ai-content\",\n    },\n    {\n      title: \"일정 관리\",\n      icon: Calendar,\n      id: \"schedule\",\n    },\n    {\n      title: \"태그 관리\",\n      icon: Tags,\n      id: \"tags\",\n    },\n    {\n      title: \"통계\",\n      icon: BarChart3,\n      id: \"analytics\",\n    },\n    {\n      title: \"사용자\",\n      icon: Users,\n      id: \"users\",\n    },\n    {\n      title: \"설정\",\n      icon: Settings,\n      id: \"settings\",\n    },\n  ];\n\n  const handleItemClick = (itemId: string) => {\n    onItemClick?.(itemId);\n    console.log('사이드바 메뉴 클릭:', itemId);\n  };\n\n  return (\n    <Sidebar>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>블로그 관리</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {menuItems.map((item) => (\n                <SidebarMenuItem key={item.id}>\n                  <SidebarMenuButton \n                    asChild\n                    isActive={activeItem === item.id}\n                    data-testid={`sidebar-${item.id}`}\n                  >\n                    <button \n                      onClick={() => handleItemClick(item.id)}\n                      className=\"flex items-center gap-3 w-full\"\n                    >\n                      <item.icon className=\"h-4 w-4\" />\n                      <span>{item.title}</span>\n                    </button>\n                  </SidebarMenuButton>\n                </SidebarMenuItem>\n              ))}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n    </Sidebar>\n  );\n}","size_bytes":2467},"client/src/components/BlogCard.tsx":{"content":"import { Calendar, User, Tag, Eye } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  tags: string[];\n  readTime: number;\n  views: number;\n  featured?: boolean;\n}\n\ninterface BlogCardProps {\n  post: BlogPost;\n  variant?: 'default' | 'featured';\n  onClick?: (post: BlogPost) => void;\n}\n\nexport default function BlogCard({ post, variant = 'default', onClick }: BlogCardProps) {\n  const handleClick = () => {\n    onClick?.(post);\n    console.log('블로그 게시물 클릭:', post.title);\n  };\n\n  return (\n    <Card className={`hover-elevate cursor-pointer transition-all ${variant === 'featured' ? 'border-primary/20' : ''}`} onClick={handleClick} data-testid={`card-blog-${post.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold text-lg leading-tight line-clamp-2\">\n            {post.title}\n          </h3>\n          {variant === 'featured' && (\n            <Badge variant=\"default\" className=\"shrink-0\">\n              추천\n            </Badge>\n          )}\n        </div>\n        \n        <p className=\"text-muted-foreground text-sm line-clamp-3 mt-2\">\n          {post.excerpt}\n        </p>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        <div className=\"flex flex-wrap items-center gap-2 text-xs text-muted-foreground mb-3\">\n          <div className=\"flex items-center gap-1\">\n            <User className=\"h-3 w-3\" />\n            <span>{post.author}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-3 w-3\" />\n            <span>{post.publishedAt}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Eye className=\"h-3 w-3\" />\n            <span>{post.views.toLocaleString()}</span>\n          </div>\n          <span>읽기 {post.readTime}분</span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex flex-wrap gap-1\">\n            {post.tags.slice(0, 3).map((tag) => (\n              <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                <Tag className=\"h-2 w-2 mr-1\" />\n                {tag}\n              </Badge>\n            ))}\n            {post.tags.length > 3 && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                +{post.tags.length - 3}\n              </Badge>\n            )}\n          </div>\n          \n          <Button variant=\"ghost\" size=\"sm\" data-testid={`button-read-${post.id}`}>\n            읽기\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2886},"client/src/components/BlogPost.tsx":{"content":"import { Calendar, User, Clock, Eye, Tag, Share2, Bookmark } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  readTime: number;\n  views: number;\n  tags: string[];\n}\n\ninterface BlogPostProps {\n  post: BlogPost;\n  onBack?: () => void;\n}\n\nexport default function BlogPost({ post, onBack }: BlogPostProps) {\n  const handleShare = () => {\n    console.log(\"게시물 공유:\", post.title);\n  };\n\n  const handleBookmark = () => {\n    console.log(\"게시물 북마크:\", post.title);\n  };\n\n  return (\n    <article className=\"max-w-4xl mx-auto px-4 py-8\">\n      {/* Header */}\n      <header className=\"mb-8\">\n        {onBack && (\n          <Button variant=\"ghost\" onClick={onBack} className=\"mb-4\" data-testid=\"button-back\">\n            ← 목록으로 돌아가기\n          </Button>\n        )}\n        \n        <h1 className=\"text-3xl md:text-4xl font-bold leading-tight mb-6\">\n          {post.title}\n        </h1>\n        \n        {/* Meta information */}\n        <div className=\"flex flex-wrap items-center gap-4 text-sm text-muted-foreground mb-6\">\n          <div className=\"flex items-center gap-1\">\n            <User className=\"h-4 w-4\" />\n            <span className=\"font-medium\">{post.author}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-4 w-4\" />\n            <span>{post.publishedAt}</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Clock className=\"h-4 w-4\" />\n            <span>읽기 {post.readTime}분</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <Eye className=\"h-4 w-4\" />\n            <span>{post.views.toLocaleString()} 조회</span>\n          </div>\n        </div>\n        \n        {/* Tags */}\n        <div className=\"flex flex-wrap gap-2 mb-6\">\n          {post.tags.map((tag) => (\n            <Badge key={tag} variant=\"secondary\" className=\"text-sm\">\n              <Tag className=\"h-3 w-3 mr-1\" />\n              {tag}\n            </Badge>\n          ))}\n        </div>\n        \n        {/* Action buttons */}\n        <div className=\"flex items-center gap-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={handleShare} data-testid=\"button-share\">\n            <Share2 className=\"h-4 w-4 mr-2\" />\n            공유하기\n          </Button>\n          <Button variant=\"outline\" size=\"sm\" onClick={handleBookmark} data-testid=\"button-bookmark\">\n            <Bookmark className=\"h-4 w-4 mr-2\" />\n            북마크\n          </Button>\n        </div>\n        \n        <Separator className=\"mt-6\" />\n      </header>\n      \n      {/* Content */}\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n            <div className=\"whitespace-pre-wrap leading-relaxed\">\n              {post.content}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {/* Footer */}\n      <footer className=\"mt-8 pt-6 border-t\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"text-sm text-muted-foreground\">\n            마지막 업데이트: {post.publishedAt}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button variant=\"outline\" size=\"sm\" onClick={handleShare} data-testid=\"button-share-footer\">\n              <Share2 className=\"h-4 w-4 mr-2\" />\n              공유\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" onClick={handleBookmark} data-testid=\"button-bookmark-footer\">\n              <Bookmark className=\"h-4 w-4 mr-2\" />\n              저장\n            </Button>\n          </div>\n        </div>\n      </footer>\n    </article>\n  );\n}","size_bytes":3977},"client/src/components/CategoryFilter.tsx":{"content":"import { useState } from \"react\";\nimport { Filter, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface CategoryFilterProps {\n  selectedCategories?: string[];\n  selectedTags?: string[];\n  onCategoryChange?: (categories: string[]) => void;\n  onTagChange?: (tags: string[]) => void;\n  onClear?: () => void;\n}\n\nexport default function CategoryFilter({\n  selectedCategories = [],\n  selectedTags = [],\n  onCategoryChange,\n  onTagChange,\n  onClear\n}: CategoryFilterProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // todo: remove mock functionality\n  const categories = [\n    { id: 'tax-guide', name: '세무 가이드', count: 42 },\n    { id: 'accounting', name: '회계', count: 28 },\n    { id: 'law-updates', name: '법규 업데이트', count: 15 },\n    { id: 'case-study', name: '사례 연구', count: 33 },\n    { id: 'tips', name: '실무 팁', count: 51 },\n    { id: 'news', name: '세무 뉴스', count: 19 }\n  ];\n\n  const popularTags = [\n    { id: 'small-business', name: '중소기업', count: 89 },\n    { id: 'corporation', name: '법인세', count: 67 },\n    { id: 'vat', name: '부가가치세', count: 45 },\n    { id: 'individual', name: '개인사업자', count: 78 },\n    { id: 'tax-saving', name: '절세', count: 34 },\n    { id: 'audit', name: '세무조사', count: 23 },\n    { id: 'startup', name: '스타트업', count: 56 },\n    { id: 'year-end', name: '연말정산', count: 41 }\n  ];\n\n  const handleCategoryToggle = (categoryId: string) => {\n    const newCategories = selectedCategories.includes(categoryId)\n      ? selectedCategories.filter(c => c !== categoryId)\n      : [...selectedCategories, categoryId];\n    \n    onCategoryChange?.(newCategories);\n    console.log('카테고리 토글:', categoryId, newCategories);\n  };\n\n  const handleTagToggle = (tagId: string) => {\n    const newTags = selectedTags.includes(tagId)\n      ? selectedTags.filter(t => t !== tagId)\n      : [...selectedTags, tagId];\n    \n    onTagChange?.(newTags);\n    console.log('태그 토글:', tagId, newTags);\n  };\n\n  const handleClear = () => {\n    onClear?.();\n    console.log('필터 초기화');\n  };\n\n  const totalFilters = selectedCategories.length + selectedTags.length;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2 text-base\">\n            <Filter className=\"h-4 w-4\" />\n            필터\n            {totalFilters > 0 && (\n              <Badge variant=\"secondary\" className=\"ml-1\">\n                {totalFilters}\n              </Badge>\n            )}\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            {totalFilters > 0 && (\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={handleClear}\n                data-testid=\"button-clear-filters\"\n              >\n                <X className=\"h-3 w-3 mr-1\" />\n                초기화\n              </Button>\n            )}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setIsExpanded(!isExpanded)}\n              data-testid=\"button-toggle-filters\"\n            >\n              {isExpanded ? '접기' : '펼치기'}\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Selected filters */}\n        {totalFilters > 0 && (\n          <div>\n            <div className=\"flex flex-wrap gap-1\">\n              {selectedCategories.map(categoryId => {\n                const category = categories.find(c => c.id === categoryId);\n                return category ? (\n                  <Badge \n                    key={categoryId} \n                    variant=\"default\" \n                    className=\"text-xs cursor-pointer\"\n                    onClick={() => handleCategoryToggle(categoryId)}\n                  >\n                    {category.name}\n                    <X className=\"h-2 w-2 ml-1\" />\n                  </Badge>\n                ) : null;\n              })}\n              {selectedTags.map(tagId => {\n                const tag = popularTags.find(t => t.id === tagId);\n                return tag ? (\n                  <Badge \n                    key={tagId} \n                    variant=\"secondary\" \n                    className=\"text-xs cursor-pointer\"\n                    onClick={() => handleTagToggle(tagId)}\n                  >\n                    {tag.name}\n                    <X className=\"h-2 w-2 ml-1\" />\n                  </Badge>\n                ) : null;\n              })}\n            </div>\n            <Separator className=\"my-3\" />\n          </div>\n        )}\n\n        {/* Categories */}\n        <div>\n          <h4 className=\"font-medium text-sm mb-3\">카테고리</h4>\n          <div className=\"space-y-2\">\n            {categories.slice(0, isExpanded ? categories.length : 4).map(category => (\n              <div key={category.id} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={category.id}\n                  checked={selectedCategories.includes(category.id)}\n                  onCheckedChange={() => handleCategoryToggle(category.id)}\n                  data-testid={`checkbox-category-${category.id}`}\n                />\n                <label \n                  htmlFor={category.id}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1\"\n                >\n                  {category.name}\n                </label>\n                <span className=\"text-xs text-muted-foreground\">({category.count})</span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <Separator />\n\n        {/* Popular Tags */}\n        <div>\n          <h4 className=\"font-medium text-sm mb-3\">인기 태그</h4>\n          <div className=\"space-y-2\">\n            {popularTags.slice(0, isExpanded ? popularTags.length : 6).map(tag => (\n              <div key={tag.id} className=\"flex items-center space-x-2\">\n                <Checkbox\n                  id={tag.id}\n                  checked={selectedTags.includes(tag.id)}\n                  onCheckedChange={() => handleTagToggle(tag.id)}\n                  data-testid={`checkbox-tag-${tag.id}`}\n                />\n                <label \n                  htmlFor={tag.id}\n                  className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer flex-1\"\n                >\n                  {tag.name}\n                </label>\n                <span className=\"text-xs text-muted-foreground\">({tag.count})</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7090},"client/src/components/Header.tsx":{"content":"import { Search, User, Settings, Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useState } from \"react\";\n\ninterface HeaderProps {\n  isAdmin?: boolean;\n  onToggleTheme?: () => void;\n  isDark?: boolean;\n}\n\nexport default function Header({ isAdmin = false, onToggleTheme, isDark = false }: HeaderProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"검색 실행:\", searchQuery);\n  };\n\n  return (\n    <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 sticky top-0 z-50\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between gap-4\">\n          {/* Logo and Title */}\n          <div className=\"flex items-center gap-3\">\n            <div className=\"h-8 w-8 bg-primary rounded-md flex items-center justify-center\">\n              <span className=\"text-primary-foreground font-bold text-sm\">TB</span>\n            </div>\n            <div>\n              <h1 className=\"font-semibold text-lg\">세무회계 블로그</h1>\n              {isAdmin && <span className=\"text-xs text-muted-foreground\">관리자 대시보드</span>}\n            </div>\n          </div>\n\n          {/* Search Bar - only on public site */}\n          {!isAdmin && (\n            <form onSubmit={handleSearch} className=\"flex-1 max-w-md\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"블로그 검색...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n            </form>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onToggleTheme}\n              data-testid=\"button-theme-toggle\"\n            >\n              {isDark ? <Sun className=\"h-4 w-4\" /> : <Moon className=\"h-4 w-4\" />}\n            </Button>\n            \n            {isAdmin && (\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={() => console.log(\"설정 클릭\")}\n                data-testid=\"button-settings\"\n              >\n                <Settings className=\"h-4 w-4\" />\n              </Button>\n            )}\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => console.log(\"프로필 클릭\")}\n              data-testid=\"button-profile\"\n            >\n              <User className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":3064},"client/src/components/ThemeProvider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};","size_bytes":1604},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminPage.tsx":{"content":"import { useState } from \"react\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport Header from \"@/components/Header\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport AdminDashboard from \"@/components/AdminDashboard\";\nimport AIContentGenerator from \"@/components/AIContentGenerator\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nexport default function AdminPage() {\n  const { theme, setTheme } = useTheme();\n  const [activeSection, setActiveSection] = useState(\"dashboard\");\n\n  const handleThemeToggle = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const handleSidebarNavigation = (section: string) => {\n    setActiveSection(section);\n    console.log(\"관리자 섹션으로 이동:\", section);\n  };\n\n  const renderContent = () => {\n    switch (activeSection) {\n      case \"dashboard\":\n        return <AdminDashboard onNavigate={handleSidebarNavigation} />;\n      \n      case \"ai-content\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">AI 콘텐츠 생성</h1>\n            <AIContentGenerator />\n          </div>\n        );\n      \n      case \"posts\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">게시물 관리</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>게시물 목록</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">게시물 관리 기능이 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"new-post\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">새 글 작성</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>글 작성 에디터</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">리치 텍스트 에디터가 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"schedule\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">일정 관리</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>발행 일정</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">게시물 일정 관리 기능이 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"analytics\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">통계 및 분석</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>블로그 통계</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">상세 통계 차트와 분석 데이터가 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"tags\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">태그 관리</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>태그 목록</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">태그 생성, 수정, 삭제 기능이 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"users\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">사용자 관리</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>사용자 목록</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">사용자 관리 및 권한 설정이 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      case \"settings\":\n        return (\n          <div>\n            <h1 className=\"text-2xl font-bold mb-6\">시스템 설정</h1>\n            <Card>\n              <CardHeader>\n                <CardTitle>블로그 설정</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">사이트 설정, SEO 옵션, AI 설정 등이 여기에 표시됩니다.</p>\n              </CardContent>\n            </Card>\n          </div>\n        );\n      \n      default:\n        return <AdminDashboard onNavigate={handleSidebarNavigation} />;\n    }\n  };\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AdminSidebar activeItem={activeSection} onItemClick={handleSidebarNavigation} />\n        \n        <div className=\"flex flex-col flex-1\">\n          <Header \n            isAdmin={true} \n            onToggleTheme={handleThemeToggle} \n            isDark={theme === \"dark\"}\n          />\n          \n          <main className=\"flex-1 overflow-auto p-6\">\n            {renderContent()}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":5431},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/Header\";\nimport BlogCard from \"@/components/BlogCard\";\nimport CategoryFilter from \"@/components/CategoryFilter\";\nimport { useTheme } from \"@/components/ThemeProvider\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Filter } from \"lucide-react\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\n\ninterface BlogPost {\n  id: string;\n  title: string;\n  excerpt: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  tags: string[];\n  readTime: number;\n  views: number;\n  featured?: boolean;\n}\n\ninterface HomeProps {\n  onPostClick?: (post: BlogPost) => void;\n}\n\nexport default function Home({ onPostClick }: HomeProps) {\n  const { theme, setTheme } = useTheme();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n\n  // todo: remove mock functionality\n  const featuredPosts: BlogPost[] = [\n    {\n      id: '1',\n      title: '2024년 세무 변경사항 완벽 가이드: 중소기업을 위한 필수 체크리스트',\n      excerpt: '2024년 새로 시행되는 세무 규정들을 정리하고, 중소기업이 놓치기 쉬운 주요 변경사항들을 상세히 설명합니다.',\n      content: '...',\n      author: '김세무',\n      publishedAt: '2024.03.15',\n      tags: ['세무법규', '중소기업', '법인세'],\n      readTime: 8,\n      views: 1247,\n      featured: true\n    },\n    {\n      id: '2',\n      title: 'AI 시대의 세무 회계: 자동화가 바꾸는 업무 환경',\n      excerpt: '인공지능과 자동화 기술이 세무 회계 분야에 미치는 영향을 분석하고, 미래 대비 전략을 제시합니다.',\n      content: '...',\n      author: '이회계',\n      publishedAt: '2024.03.12',\n      tags: ['AI', '자동화', '미래전략'],\n      readTime: 6,\n      views: 892,\n      featured: true\n    }\n  ];\n\n  const recentPosts: BlogPost[] = [\n    {\n      id: '3',\n      title: '중소기업 절세 전략 10가지: 놓치기 쉬운 공제 항목들',\n      excerpt: '중소기업이 활용할 수 있는 다양한 절세 방법과 세액공제 혜택을 실무 중심으로 설명합니다.',\n      content: '...',\n      author: '박절세',\n      publishedAt: '2024.03.10',\n      tags: ['절세', '중소기업', '세액공제'],\n      readTime: 5,\n      views: 673\n    },\n    {\n      id: '4',\n      title: '개인사업자 부가가치세 신고 가이드',\n      excerpt: '개인사업자를 위한 부가가치세 신고 절차와 주의사항을 단계별로 안내합니다.',\n      content: '...',\n      author: '최부가',\n      publishedAt: '2024.03.08',\n      tags: ['부가가치세', '개인사업자', '신고'],\n      readTime: 7,\n      views: 541\n    },\n    {\n      id: '5',\n      title: '스타트업을 위한 세무 회계 기초',\n      excerpt: '창업 초기 스타트업이 알아야 할 필수 세무 지식과 회계 관리 방법을 소개합니다.',\n      content: '...',\n      author: '정스타',\n      publishedAt: '2024.03.05',\n      tags: ['스타트업', '창업', '회계기초'],\n      readTime: 9,\n      views: 1123\n    },\n    {\n      id: '6',\n      title: '연말정산 체크리스트: 놓치지 말아야 할 항목들',\n      excerpt: '연말정산 시 꼭 확인해야 할 항목들과 최대한 환급받는 방법을 알려드립니다.',\n      content: '...',\n      author: '한연말',\n      publishedAt: '2024.03.03',\n      tags: ['연말정산', '환급', '소득공제'],\n      readTime: 6,\n      views: 856\n    }\n  ];\n\n  const handleThemeToggle = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    console.log(\"검색 실행:\", searchQuery);\n  };\n\n  const handlePostClick = (post: BlogPost) => {\n    onPostClick?.(post);\n    console.log(\"게시물 클릭:\", post.title);\n  };\n\n  const handleClearFilters = () => {\n    setSelectedCategories([]);\n    setSelectedTags([]);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onToggleTheme={handleThemeToggle} isDark={theme === \"dark\"} />\n\n      {/* Hero Section */}\n      <section className=\"bg-gradient-to-b from-primary/10 to-background py-12 border-b\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              전문 세무회계 정보\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8\">\n              최신 세무 법규부터 실무 팁까지, 신뢰할 수 있는 세무회계 전문 블로그\n            </p>\n            \n            {/* Search Bar */}\n            <form onSubmit={handleSearch} className=\"max-w-md mx-auto\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"궁금한 세무 정보를 검색하세요...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 pr-4 py-3 text-base\"\n                  data-testid=\"input-hero-search\"\n                />\n              </div>\n            </form>\n          </div>\n        </div>\n      </section>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex gap-8\">\n          {/* Mobile Filter Button */}\n          <div className=\"lg:hidden\">\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" data-testid=\"button-mobile-filter\">\n                  <Filter className=\"h-4 w-4 mr-2\" />\n                  필터\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-80\">\n                <CategoryFilter\n                  selectedCategories={selectedCategories}\n                  selectedTags={selectedTags}\n                  onCategoryChange={setSelectedCategories}\n                  onTagChange={setSelectedTags}\n                  onClear={handleClearFilters}\n                />\n              </SheetContent>\n            </Sheet>\n          </div>\n\n          {/* Desktop Sidebar */}\n          <aside className=\"hidden lg:block w-80 shrink-0\">\n            <div className=\"sticky top-24\">\n              <CategoryFilter\n                selectedCategories={selectedCategories}\n                selectedTags={selectedTags}\n                onCategoryChange={setSelectedCategories}\n                onTagChange={setSelectedTags}\n                onClear={handleClearFilters}\n              />\n            </div>\n          </aside>\n\n          {/* Main Content */}\n          <main className=\"flex-1\">\n            {/* Featured Posts */}\n            <section className=\"mb-12\">\n              <h2 className=\"text-2xl font-bold mb-6\">추천 게시물</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {featuredPosts.map((post) => (\n                  <BlogCard\n                    key={post.id}\n                    post={post}\n                    variant=\"featured\"\n                    onClick={handlePostClick}\n                  />\n                ))}\n              </div>\n            </section>\n\n            {/* Recent Posts */}\n            <section>\n              <h2 className=\"text-2xl font-bold mb-6\">최신 게시물</h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {recentPosts.map((post) => (\n                  <BlogCard\n                    key={post.id}\n                    post={post}\n                    onClick={handlePostClick}\n                  />\n                ))}\n              </div>\n            </section>\n\n            {/* Load More */}\n            <div className=\"text-center mt-12\">\n              <Button variant=\"outline\" size=\"lg\" data-testid=\"button-load-more\">\n                더 많은 게시물 보기\n              </Button>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8333},"client/src/pages/PostView.tsx":{"content":"import { useTheme } from \"@/components/ThemeProvider\";\nimport Header from \"@/components/Header\";\nimport BlogPost from \"@/components/BlogPost\";\n\ninterface BlogPostData {\n  id: string;\n  title: string;\n  content: string;\n  author: string;\n  publishedAt: string;\n  readTime: number;\n  views: number;\n  tags: string[];\n}\n\ninterface PostViewProps {\n  post: BlogPostData;\n  onBack?: () => void;\n}\n\nexport default function PostView({ post, onBack }: PostViewProps) {\n  const { theme, setTheme } = useTheme();\n\n  const handleThemeToggle = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onToggleTheme={handleThemeToggle} isDark={theme === \"dark\"} />\n      <BlogPost post={post} onBack={onBack} />\n    </div>\n  );\n}","size_bytes":797},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 페이지를 찾을 수 없습니다</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            요청하신 페이지가 존재하지 않습니다. 홈페이지로 돌아가서 다시 시도해보세요.\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":796},"client/src/components/examples/AIContentGenerator.tsx":{"content":"import AIContentGenerator from '../AIContentGenerator';\n\nexport default function AIContentGeneratorExample() {\n  const handleContentGenerated = (content: any) => {\n    console.log('AI 콘텐츠 생성됨:', content);\n  };\n\n  return (\n    <div className=\"max-w-2xl\">\n      <h3 className=\"font-semibold mb-4\">AI 콘텐츠 생성기</h3>\n      <AIContentGenerator onContentGenerated={handleContentGenerated} />\n    </div>\n  );\n}","size_bytes":425},"client/src/components/examples/AdminDashboard.tsx":{"content":"import AdminDashboard from '../AdminDashboard';\n\nexport default function AdminDashboardExample() {\n  const handleNavigate = (section: string) => {\n    console.log('페이지 이동:', section);\n  };\n\n  return (\n    <div className=\"p-4\">\n      <AdminDashboard onNavigate={handleNavigate} />\n    </div>\n  );\n}","size_bytes":307},"client/src/components/examples/AdminSidebar.tsx":{"content":"import AdminSidebar from '../AdminSidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\nimport { useState } from 'react';\n\nexport default function AdminSidebarExample() {\n  const [activeItem, setActiveItem] = useState('dashboard');\n\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-96 w-full border rounded-md overflow-hidden\">\n        <AdminSidebar \n          activeItem={activeItem} \n          onItemClick={setActiveItem}\n        />\n        <div className=\"flex-1 p-4 bg-background\">\n          <h3 className=\"font-semibold mb-2\">선택된 메뉴</h3>\n          <p className=\"text-muted-foreground\">{activeItem}</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":831},"client/src/components/examples/BlogCard.tsx":{"content":"import BlogCard from '../BlogCard';\n\nexport default function BlogCardExample() {\n  // todo: remove mock functionality\n  const samplePost = {\n    id: '1',\n    title: '2024년 세무 변경사항 완벽 가이드: 중소기업을 위한 필수 체크리스트',\n    excerpt: '2024년 새로 시행되는 세무 규정들을 정리하고, 중소기업이 놓치기 쉬운 주요 변경사항들을 상세히 설명합니다. 법인세, 부가가치세, 원천징수 등 핵심 영역별로 준비해야 할 사항들을 알아보세요.',\n    content: '...',\n    author: '김세무',\n    publishedAt: '2024.03.15',\n    tags: ['세무법규', '중소기업', '법인세', '2024년 변경사항'],\n    readTime: 8,\n    views: 1247,\n    featured: false\n  };\n\n  const featuredPost = {\n    ...samplePost,\n    id: '2',\n    title: 'AI 시대의 세무 회계: 자동화가 바꾸는 업무 환경',\n    excerpt: '인공지능과 자동화 기술이 세무 회계 분야에 미치는 영향을 분석하고, 미래 대비 전략을 제시합니다.',\n    views: 2156,\n    featured: true,\n    tags: ['AI', '자동화', '미래전략', '디지털세무']\n  };\n\n  const handleCardClick = (post: any) => {\n    console.log('블로그 카드 클릭:', post.title);\n  };\n\n  return (\n    <div className=\"space-y-6 max-w-md\">\n      <div>\n        <h3 className=\"font-semibold mb-4\">일반 블로그 카드</h3>\n        <BlogCard post={samplePost} onClick={handleCardClick} />\n      </div>\n      \n      <div>\n        <h3 className=\"font-semibold mb-4\">추천 블로그 카드</h3>\n        <BlogCard post={featuredPost} variant=\"featured\" onClick={handleCardClick} />\n      </div>\n    </div>\n  );\n}","size_bytes":1675},"client/src/components/examples/BlogPost.tsx":{"content":"import BlogPost from '../BlogPost';\n\nexport default function BlogPostExample() {\n  // todo: remove mock functionality\n  const samplePost = {\n    id: '1',\n    title: '2024년 세무 변경사항 완벽 가이드: 중소기업을 위한 필수 체크리스트',\n    content: `# 2024년 세무 변경사항 개요\n\n2024년에는 중소기업을 위한 다양한 세무 혜택과 규정 변경이 있었습니다. 이 가이드에서는 주요 변경사항들을 체계적으로 정리하여 실무에 바로 적용할 수 있도록 도와드리겠습니다.\n\n## 주요 변경사항\n\n### 1. 법인세 관련 변경사항\n\n#### 중소기업 특별세액감면 확대\n- 적용 대상: 중소기업 (매출액 400억원 미만)\n- 감면율: 10% → 15%로 확대\n- 적용기간: 2024.1.1 ~ 2026.12.31\n\n#### 연구개발비 세액공제 강화\n연구개발비에 대한 세액공제율이 다음과 같이 조정되었습니다:\n\n- 일반 중소기업: 25% → 30%\n- 벤처기업: 30% → 35%\n- 첨단기술 분야: 추가 5% 가산\n\n### 2. 부가가치세 변경사항\n\n#### 간이과세 기준금액 상향조정\n- 기존: 4,800만원\n- 변경: 8,000만원\n- 적용시기: 2024년 1월 1일부터\n\n이로 인해 더 많은 소상공인들이 간이과세 혜택을 받을 수 있게 되었습니다.\n\n### 3. 원천징수 관련 변경사항\n\n#### 근로소득 간이세액표 개정\n월급여 구간별 원천징수세액이 조정되어 근로자의 세부담이 경감되었습니다.\n\n## 중소기업 체크리스트\n\n### 즉시 확인해야 할 사항\n1. [ ] 우리 회사 매출액이 간이과세 기준에 해당하는지 확인\n2. [ ] R&D 투자 계획이 있다면 세액공제 혜택 검토\n3. [ ] 기존 세무 신고 프로세스 점검 및 업데이트\n\n### 3월까지 준비해야 할 사항\n1. [ ] 2023년 법인세 신고 시 새로운 공제항목 적용\n2. [ ] 회계시스템 업데이트 (새로운 세율 반영)\n3. [ ] 세무대리인과 변경사항 논의\n\n## 실무 적용 가이드\n\n### 세액공제 신청 방법\n1. 국세청 홈택스 접속\n2. 법인 → 신고/납부 → 법인세 신고\n3. 해당 공제항목에 필요 서류 첨부\n4. 온라인 제출 또는 세무서 방문 제출\n\n### 필요 서류\n- 연구개발비 계산서\n- 관련 계약서 사본\n- 지출증빙 서류\n\n## 주의사항\n\n⚠️ **중요**: 모든 변경사항은 2024년 1월 1일부터 적용되므로, 기존 계약이나 시스템을 점검하여 필요한 조치를 취하시기 바랍니다.\n\n⚠️ **세무 신고 시**: 새로운 양식과 기준을 적용해야 하므로 세무 전문가와 상담을 권장합니다.\n\n## 마무리\n\n2024년 세무 변경사항들은 전반적으로 중소기업에게 유리한 방향으로 개정되었습니다. 하지만 복잡한 세법의 특성상 전문가의 도움을 받아 정확한 적용을 하시기 바랍니다.\n\n추가 문의사항이 있으시면 언제든지 연락주시기 바랍니다.`,\n    author: '김세무',\n    publishedAt: '2024.03.15',\n    readTime: 8,\n    views: 1247,\n    tags: ['세무법규', '중소기업', '법인세', '2024년 변경사항', '세액공제']\n  };\n\n  const handleBack = () => {\n    console.log('뒤로가기 버튼 클릭');\n  };\n\n  return (\n    <div>\n      <BlogPost post={samplePost} onBack={handleBack} />\n    </div>\n  );\n}","size_bytes":3326},"client/src/components/examples/CategoryFilter.tsx":{"content":"import CategoryFilter from '../CategoryFilter';\nimport { useState } from 'react';\n\nexport default function CategoryFilterExample() {\n  const [selectedCategories, setSelectedCategories] = useState<string[]>(['tax-guide']);\n  const [selectedTags, setSelectedTags] = useState<string[]>(['small-business', 'corporation']);\n\n  const handleClear = () => {\n    setSelectedCategories([]);\n    setSelectedTags([]);\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <h3 className=\"font-semibold mb-4\">카테고리 필터</h3>\n      <CategoryFilter\n        selectedCategories={selectedCategories}\n        selectedTags={selectedTags}\n        onCategoryChange={setSelectedCategories}\n        onTagChange={setSelectedTags}\n        onClear={handleClear}\n      />\n    </div>\n  );\n}","size_bytes":769},"client/src/components/examples/Header.tsx":{"content":"import Header from '../Header';\nimport { useState } from 'react';\n\nexport default function HeaderExample() {\n  const [isDark, setIsDark] = useState(false);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n    console.log('테마 변경:', !isDark ? '다크' : '라이트');\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      <div>\n        <h3 className=\"font-semibold mb-4\">공개 블로그 헤더</h3>\n        <Header onToggleTheme={toggleTheme} isDark={isDark} />\n      </div>\n      \n      <div>\n        <h3 className=\"font-semibold mb-4\">관리자 대시보드 헤더</h3>\n        <Header isAdmin={true} onToggleTheme={toggleTheme} isDark={isDark} />\n      </div>\n    </div>\n  );\n}","size_bytes":694},"client/src/components/examples/ThemeProvider.tsx":{"content":"import { ThemeProvider, useTheme } from '../ThemeProvider';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Moon, Sun, Monitor } from 'lucide-react';\n\nfunction ThemeToggleButtons() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>테마 설정</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"flex gap-2\">\n          <Button\n            variant={theme === \"light\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"light\")}\n            data-testid=\"button-theme-light\"\n          >\n            <Sun className=\"h-4 w-4 mr-2\" />\n            밝은 모드\n          </Button>\n          <Button\n            variant={theme === \"dark\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"dark\")}\n            data-testid=\"button-theme-dark\"\n          >\n            <Moon className=\"h-4 w-4 mr-2\" />\n            어두운 모드\n          </Button>\n          <Button\n            variant={theme === \"system\" ? \"default\" : \"outline\"}\n            onClick={() => setTheme(\"system\")}\n            data-testid=\"button-theme-system\"\n          >\n            <Monitor className=\"h-4 w-4 mr-2\" />\n            시스템\n          </Button>\n        </div>\n        <p className=\"text-sm text-muted-foreground\">\n          현재 테마: {theme}\n        </p>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function ThemeProviderExample() {\n  return (\n    <ThemeProvider defaultTheme=\"light\">\n      <div className=\"p-4\">\n        <ThemeToggleButtons />\n      </div>\n    </ThemeProvider>\n  );\n}","size_bytes":1690},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"scripts/add-seo-guideline.ts":{"content":"#!/usr/bin/env tsx\n\n// Script to add the SEO guideline to the database\nimport { storage } from \"../server/storage\";\n\nasync function addSeoGuideline() {\n  const guidelineContent = `# SEO 블로그 작성 메타프롬프트 v2.0\n\n## 핵심 목표\n- 글자수: 공백 제외 1,800~2,000자 엄수\n- 메인 키워드: 본문에 정확히 5회 사용\n- 감정 중심: 세무 정보는 최소화, 사업자의 불안과 고민에 집중\n- 실제 상담 전환: 신뢰 구축으로 문의 유도\n\n## 사전 분석 단계 (필수)\n\n### 1. 경쟁 콘텐츠 분석\n- 타겟 키워드: [입력한 키워드]\n- 상위 1-3위 블로그 분석:\n  - 제목 패턴\n  - 도입부 접근 방식\n  - 주요 내용 구성\n  - → 정보 중심이라면 → 감정/경험 중심으로 차별화\n\n### 2. 차별화 전략\n- 정보 나열: \"○○ 방법 5가지\" → 심리 공감: \"○○ 때문에 잠 못 드는 대표님들\"\n- 이론 설명: \"○○란 무엇인가\" → 실제 고민: \"○○ 처리하다 울컥했던 순간\"\n- 일반 팁: \"○○ 주의사항\" → 경험담: \"○○로 곤란했던 사장님 이야기\"\n\n## 도입부 유형 (주제별 3-4개 제안)\n\n### 유형 1: 직접 질문형\n구조: 날카로운 질문 → 불안감 증폭 → 공감 → 해결 예고\n\n예시:\n\\`\\`\\`\n\"대표님, 올해 세금 얼마나 내셨나요?\n혹시 '이게 맞나?' 싶으셨다면, 그 직감이 맞을 수 있습니다.\n제가 상담한 대표님들 중 70%가...\"\n\\`\\`\\`\n\n### 유형 2: 충격 사실형\n구조: 놀라운 통계/사실 → 독자 상황 연결 → 위기감 조성 → 해법 암시\n\n예시:\n\\`\\`\\`\n\"작년 한 해, 제가 본 것만 해도 38억이 넘는 세금이 잘못 나갔습니다.\n문제는 대부분의 대표님들이 이걸 모른다는 거예요.\n심지어 세무사를 쓰고 있는데도...\"\n\\`\\`\\`\n\n### 유형 3: 의문 제기형\n구조: 모순적 상황 제시 → 의구심 자극 → 숨겨진 진실 암시 → 궁금증 유발\n\n예시:\n\\`\\`\\`\n\"세무사에게 매달 기장료를 내는데, 왜 세금은 줄지 않을까요?\n이상하지 않으세요?\n사실 여기엔 아무도 말해주지 않는 불편한 진실이...\"\n\\`\\`\\`\n\n### 유형 4: 공감 스토리형\n구조: 일상적 상황 → 감정 이입 → 문제 인식 → 해결 필요성\n\n예시:\n\\`\\`\\`\n\"어제도 한 대표님이 찾아오셨습니다. 표정이 어두우셨어요.\n'세무사님, 저 이번에 세금 폭탄 맞았어요...'\n알고 보니 3년 전부터 실수가 시작됐더라고요.\"\n\\`\\`\\`\n\n## 본문 구성 원칙\n\n### 1. 감정선 중심 전개\n- 불안 → 공감 → 위기감 → 해결책 → 안도감\n- 세무 정보는 필요한 최소한만\n- 사례와 경험담으로 신뢰성 확보\n\n### 2. 소제목 작성법 (숫자 사용 금지)\n피해야 할 형식:\n- 실수 1번, 2번, 3번\n- 첫 번째, 두 번째, 세 번째\n- STEP 1, STEP 2, STEP 3\n\n권장 형식:\n- \"이런 대표님들이 가장 위험합니다\"\n- \"세무사가 말 안 하는 불편한 진실\"\n- \"대표님이 놓치고 있는 진짜 문제\"\n\n### 3. 문단 구성\n- 한 문단 3-4줄 엄수\n- 감정 표현 → 구체적 상황 → 결과/영향\n- 전문용어 최소화, 일상어 사용\n\n## 신뢰성 확보 전략\n\n### 1. 구체적 경험담 활용\n- \"작년에 상담했던 ○○업 대표님은...\"\n- \"10년 동안 봐온 케이스 중에서...\"\n- \"실제로 이런 일이 있었습니다...\"\n\n### 2. 예상 반박 선제 대응\n- 독자 의심: \"과장 아닌가?\"\n  → \"믿기 어려우시죠? 저도 처음엔...\"\n- 독자 의심: \"나한텐 해당 안 될걸?\"\n  → \"물론 모든 분께 해당되진 않지만...\"\n\n## 글자수 관리 전략\n\n### 구간별 배분 (공백 제외 1,800~2,000자)\n- 도입부: 150~200자 (전체 감정선 설정)\n- 본문 1: 400~500자 (핵심 문제 제시)\n- 본문 2: 400~500자 (구체적 사례/경험)\n- 본문 3: 400~500자 (해결 방향/차별점)\n- 마무리: 300~400자 (신뢰+상담 유도)\n\n### 메인 키워드 배치 (정확히 5회)\n- 첫 문단에서 자연스럽게 1회\n- 각 본문 소제목 또는 첫 줄에 1회씩 (3회)\n- 마무리 문단에서 1회\n\n## 🔥 글자수 자동 확인 시스템 (신규)\n\n### 작성 완료 후 필수 실행\n\\`\\`\\`javascript\n// 아래 코드를 복사해서 실행하세요\nfunction checkBlogCharCount(text) {\n    const charCount = text.replace(/\\\\s/g, '').length;\n    const minChars = 1800;\n    const maxChars = 2000;\n    \n    console.log(\\`\\\\n===== 글자수 검사 결과 =====\\`);\n    console.log(\\`공백 제외 글자수: \\${charCount}자\\`);\n    console.log(\\`목표 범위: \\${minChars}~\\${maxChars}자\\`);\n    \n    if (charCount < minChars) {\n        console.log(\\`⚠️ 상태: \\${minChars - charCount}자 부족\\`);\n        console.log(\\`\\\\n📝 추가 작성 가이드:\\`);\n        console.log(\\`- 각 소제목별로 사례를 1개씩 더 추가\\`);\n        console.log(\\`- 감정 표현을 더 구체적으로 묘사\\`);\n        console.log(\\`- 대화체를 활용한 상황 설명 추가\\`);\n    } else if (charCount > maxChars) {\n        console.log(\\`⚠️ 상태: \\${charCount - maxChars}자 초과\\`);\n        console.log(\\`\\\\n✂️ 축소 가이드:\\`);\n        console.log(\\`- 중복되는 표현 제거\\`);\n        console.log(\\`- 부사와 형용사 최소화\\`);\n        console.log(\\`- 핵심만 남기고 부연 설명 축소\\`);\n    } else {\n        console.log(\\`✅ 상태: 적정 범위 달성!\\`);\n    }\n    \n    // 구간별 글자수 분석\n    const sections = text.split(/\\\\n## /);\n    console.log(\\`\\\\n===== 구간별 분석 =====\\`);\n    sections.forEach((section, index) => {\n        if (section.trim()) {\n            const sectionCharCount = section.replace(/\\\\s/g, '').length;\n            console.log(\\`구간 \\${index}: \\${sectionCharCount}자\\`);\n        }\n    });\n}\n\n// 작성한 글을 여기에 붙여넣고 실행\nconst blogText = \\`\n여기에 작성한 전체 글을 붙여넣으세요\n\\`;\n\ncheckBlogCharCount(blogText);\n\\`\\`\\`\n\n### 글자수 부족 시 추가 전략\n1. **경험담 확장 (각 100~150자 추가 가능)**\n   - \"그때 대표님 표정이 지금도 생생해요...\"\n   - \"처음엔 저도 믿기 어려웠습니다만...\"\n   - \"상담실을 나가시는 모습이 완전히 달라지셨어요...\"\n\n2. **감정 묘사 강화 (각 50~100자 추가 가능)**\n   - 불안감의 구체적 묘사\n   - 안도감의 신체적 표현\n   - 변화 전후 대비\n\n3. **대화체 활용 (각 80~120자 추가 가능)**\n   - 실제 상담 중 나눈 대화 재현\n   - 대표님들의 생생한 반응\n   - 깨달음의 순간 표현\n\n### 글자수 초과 시 축소 전략\n1. **중복 표현 제거**\n   - 같은 의미 반복 제거\n   - 유사한 감정 표현 통합\n   - 부연 설명 최소화\n\n2. **문장 압축**\n   - 긴 문장을 짧게 분할\n   - 불필요한 접속사 제거\n   - 핵심만 남기기\n\n## 작성 체크리스트 (개선판)\n\n### 필수 확인 사항\n- [ ] 글자수 자동 확인 코드 실행 완료\n- [ ] 1,800~2,000자 범위 확인\n- [ ] 메인 키워드 정확히 5회 사용\n- [ ] 도입부가 감정/심리 중심인가?\n- [ ] 숫자 없는 소제목 사용했는가?\n- [ ] 세무 정보는 최소화했는가?\n- [ ] 사업자 불안/고민에 공감했는가?\n- [ ] 구체적 경험담이 있는가?\n- [ ] 글자수 부족/초과 시 수정 완료\n\n### 금지 사항\n- 딱딱한 정보 나열\n- 교과서적 설명\n- 숫자로 된 순서 표시\n- 과도한 전문용어\n- 일방적 홍보\n\n## 실행 템플릿\n\n### 작성 요청 양식\n\\`\\`\\`\n주제: [구체적 세무 주제]\n메인 키워드: [타겟 키워드]\n타겟 독자의 주요 고민: [심리적 불안 요소]\n차별화 포인트: [감정 중심 vs 정보 중심]\n도입부 스타일: [1~4번 중 선택]\n\\`\\`\\`\n\n### 작성 프로세스\n1. 초안 작성 (감정선 중심)\n2. 글자수 자동 확인 코드 실행\n3. 부족/초과 시 가이드에 따라 수정\n4. 키워드 횟수 최종 확인\n5. 전체 감정선 점검`;\n\n  try {\n    console.log(\"Adding SEO guideline to database...\");\n    \n    const guideline = await storage.createSeoGuideline({\n      name: \"세무 회계 블로그 작성 가이드라인 v2.0\",\n      description: \"세무 회계 사무소를 위한 감정 중심의 SEO 최적화 블로그 작성 가이드라인. 1,800-2,000자 엄수, 키워드 5회 사용, 실제 상담 전환 목적.\",\n      guidelines: guidelineContent,\n      version: \"2.0\",\n      active: true\n    });\n    \n    console.log(\"✅ SEO 가이드라인이 성공적으로 추가되었습니다!\");\n    console.log(\"ID:\", guideline.id);\n    console.log(\"이름:\", guideline.name);\n    console.log(\"버전:\", guideline.version);\n    console.log(\"활성화 상태:\", guideline.active);\n    \n    // 활성화 설정\n    await storage.setActiveSeoGuideline(guideline.id);\n    console.log(\"✅ 가이드라인이 활성화되었습니다!\");\n    \n    process.exit(0);\n  } catch (error) {\n    console.error(\"❌ SEO 가이드라인 추가 중 오류 발생:\", error);\n    process.exit(1);\n  }\n}\n\naddSeoGuideline();","size_bytes":9046}},"version":1}